version: "3"
services: 
  frontend:
    build: 
      dockerfile: Dockerfile.dev
      context: ./frontend
    volumes:
      - /app/node_modules
      - ./frontend:/app
    stdin_open: true

  nginx:
    restart: always
    build: 
      dockerfile: Dockerfile
      context: ./nginx
    ports:
      - "3000:80"
      
  backend:
    build: 
      dockerfile: Dockerfile.dev
      context: ./backend
    container_name: app_backend
    volumes:
      - /app/node_modules
      - ./backend:/app
    environment:
      - MYSQL_HOST: mysql
      - MYSQL_USER: root
      - MYSQL_ROOT_PASSWORD: choi1234
      - MYSQL_DATABASE: myapp
      - MYSQL_PORT: 3306
  # mysql: 
  #   build: ./mysql
  #   restart: unless-stopped
  #   container_name: app_mysql
  #   ports:
  #     - "3306:3306"
  #   volumes:
  #     - ./mysql/mysql_data:/var/lib/mysql
  #     - ./mysql/sqls/:docker-entrypoint-initdb.d/
  #   environment:
  #     MYSQL_ROOT_PASSWORD: 12345
  #     MYSQL_DATABASE: myapp


# ./mysql/mysql_data:/var/lib/mysql --> 현재까지는 volume을 사용한 용도는 리액트나 노드쪽에서 코드를 업데이트 할때 바로 그 코드가 어플리케이션에 적용이 될 수 있게 해주기 위해서 사용함
#                                       하지만 첫번째 volume은 데이터 베이스의 저장된 자료를 컨테이너를 지우더라도 자료가 지워지지 않을 수 있게 해주기 위한 볼륨임.
#                                   --> 호스트 파일 시스템이라는 Docker Area에다가 저장을 함
#                                   --> 컨테이너에서 변화가 일어난 데이터가 컨테이너안에 저장 되는것이 아닌 호스트 파일 시스템에 저장되고 그중에서도 도커에 의해서만 통제가되는 도커 Area에 저장이 되므로 컨테이너를 삭제해도 변화된 데이터는 사라지지 않는다.